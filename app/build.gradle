apply plugin: 'com.android.application'

static def buildDateTime() {
    /**
     * Use the number of seconds/10 since Jan 1 2017 as the versionCode.
     * This lets us upload a new build at most every 10 seconds for the
     * next 680 years.
     */
    def code = (int) (((new Date().getTime() / 1000) - 1483228800) / 10)
    return code
}

android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "com.team.killskills.nukvoy_android"
        minSdkVersion 21
        targetSdkVersion 26
        versionCode buildDateTime()
        versionName "1.0"

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath true
            }
        }

        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        applicationVariants.all {
            variant ->

                buildConfigField "String", "url", '"https://nameless-beach-74913.herokuapp.com/airports/all"'
                resValue "string", "app_version", "${defaultConfig.versionName}"
                if (variant.name == "release") {
                    buildConfigField "boolean", 'IS_PRODUCTION', "true"
                } else {
                    buildConfigField "boolean", 'IS_PRODUCTION', "false"
                }
                variant.outputs.each {
                    output ->
                        output.processManifest.doLast {
                            // Stores the path to the maifest.
                            String manifestPath = "$manifestOutputDirectory/AndroidManifest.xml"
                            // Stores the contents of the manifest.
                            def manifestContent = file(manifestPath).getText()
                            // Changes the version code in the stored text.
                            manifestContent = manifestContent.replace("android:glEsVersion=\"0x00020000\"",
                                    "android:glEsVersion=\"0x00010000\"")
                            // Overwrites the manifest with the new text.
                            file(manifestPath).write(manifestContent)
                        }
                }
        }

        debug{
            manifestPlaceholders = [GOOGLE_MAP_KEY: "AIzaSyBcmVlYS64szr91ya7NHYHEvXVK81gACSc"]
        }

        release {
            manifestPlaceholders = [GOOGLE_MAP_KEY: "AIzaSyBcmVlYS64szr91ya7NHYHEvXVK81gACSc"]

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.android.support.constraint:constraint-layout:1.0.2'

    implementation 'com.android.support:cardview-v7:'+ rootProject.supportLibVersion
    implementation 'com.android.support:appcompat-v7:'+ rootProject.supportLibVersion
    implementation 'com.android.support:recyclerview-v7:'+ rootProject.supportLibVersion
    implementation 'com.google.android.gms:play-services-maps:'+rootProject.playServicesVersion

    implementation 'com.squareup.okhttp3:okhttp:3.8.1'
    implementation 'com.bluelinelabs:logansquare-compiler:1.3.6'

    //implementation 'com.caverock:androidsvg:1.2.1'
    //implementation 'com.github.bumptech.glide:glide:4.3.1'
    //annotationProcessor 'com.github.bumptech.glide:compiler:4.3.1'

    // implementation 'android.arch.lifecycle:extensions:' + rootProject.archLifecycleVersion
    implementation 'android.arch.persistence.room:runtime:' + rootProject.archRoomVersion
    //annotationProcessor 'android.arch.lifecycle:compiler:' + rootProject.archLifecycleVersion
    annotationProcessor 'android.arch.persistence.room:compiler:' + rootProject.archRoomVersion

    testImplementation 'junit:junit:4.12'
    //androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}
